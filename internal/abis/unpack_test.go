package abis_test

import (
	_ "embed"
	"reflect"
	"strings"
	"testing"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/islishude/web3-cli/internal/abis"
)

//go:embed testdata/unpack.abi.json
var unpackRawABI string

func TestUnpack(t *testing.T) {
	ttabi, err := abi.JSON(strings.NewReader(unpackRawABI))
	if err != nil {
		t.Fatal(err)
	}

	tests := []struct {
		name    string
		output  string
		want    []any
		wantErr bool
	}{
		{
			"call1",
			"0xc030daced5ae6a930943c5898fb42917b7d286f6716e1ea31c14817a4a881b3c",
			[]any{"0xc030daced5ae6a930943c5898fb42917b7d286f6716e1ea31c14817a4a881b3c"},
			false,
		},
		{
			"call2",
			"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000064",
			[]any{[]any{map[string]any{"P1": "0x0000000000000000000000000000000000000001", "P2": "0x64"}}},
			false,
		},
		{
			"call3",
			"0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000064",
			[]any{map[string]any{"P1": "0x0000000000000000000000000000000000000001", "P2": "0x64"}},
			false,
		},
		{
			"call4",
			"0x0000000000000000000000000000000000000000000000000000000000000064",
			[]any{"0x64"},
			false,
		},
		{
			"call5",
			"0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002",
			[]any{[]any{"0x1", "0x2", "0x2"}},
			false,
		},
		{
			"call6",
			"0x00000000000000000000000087d6358f6d61fe0c3c5391d16981e70537a5bd4d",
			[]any{"0x87d6358F6D61fE0C3c5391D16981E70537A5Bd4D"},
			false,
		},
		{
			"call7",
			"0x0000000000000000000000000000000000000000000000000000000000000001",
			[]any{true},
			false,
		},
		{
			"call8",
			"0x0000000000000000000000000000000000000000000000000000000000000064",
			[]any{"0x64"},
			false,
		},
		{
			"call9",
			"0x0000000000000000000000000000000000000000000000000000000000000064",
			[]any{"0x64"},
			false,
		},
		{
			"call10",
			"0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000",
			[]any{"0x10"},
			false,
		},
		{
			"call11",
			"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b68656c6c6f2c776f726c64000000000000000000000000000000000000000000",
			[]any{"hello,world"},
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := abis.Unpack(&ttabi, tt.name, hexutil.MustDecode(tt.output))
			if (err != nil) != tt.wantErr {
				t.Errorf("Unpack() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Unpack() = %v, want %v", got, tt.want)
			}
		})
	}
}
