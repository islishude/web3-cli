package abis_test

import (
	_ "embed"
	"reflect"
	"strings"
	"testing"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/islishude/web3-cli/internal/abis"
)

//go:embed testdata/typetest.abi.json
var typeTestRawABI string

func TestPack(t *testing.T) {
	ttabi, err := abi.JSON(strings.NewReader(typeTestRawABI))
	if err != nil {
		t.Fatal(err)
	}

	type args struct {
		abiIns  *abi.ABI
		abiArgs []string
	}
	tests := []struct {
		name    string
		args    args
		want    string
		wantErr bool
	}{
		{
			"add",
			args{&ttabi, []string{"add", "0x1", "2", "3"}},
			"0x1bc6637f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003",
			false,
		},
		{
			"transfer-1",
			args{&ttabi, []string{"transfer", `["0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2",100]`}},
			"0x2bd14bb9000000000000000000000000ab8483f64d9c6d1ecf9b849ae677dd3315835cb20000000000000000000000000000000000000000000000000000000000000064",
			false,
		},
		{
			"mutil_transfer-1",
			args{&ttabi, []string{"mutil_transfer", `[["0x5B38Da6a701c568545dCfcB03FcB875f56beddC4","0x0"]]`}},
			"0x37c5097c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc40000000000000000000000000000000000000000000000000000000000000000",
			false,
		},
		{
			"mutil_transfer-2",
			args{&ttabi, []string{"mutil_transfer", `[["0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2",100]]`}},
			"0x37c5097c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ab8483f64d9c6d1ecf9b849ae677dd3315835cb20000000000000000000000000000000000000000000000000000000000000064",
			false,
		},
		{
			"mutil_transfer-map-tuple",
			args{&ttabi, []string{"mutil_transfer", `[{"to":"0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2","value":100}]`}},
			"0x37c5097c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ab8483f64d9c6d1ecf9b849ae677dd3315835cb20000000000000000000000000000000000000000000000000000000000000064",
			false,
		},
		{
			"logstr",
			args{&ttabi, []string{"logstr", `hello,web3-cli!`}},
			"0x139aa6520000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000f68656c6c6f2c776562332d636c69210000000000000000000000000000000000",
			false,
		},
		{
			"logbyt",
			args{&ttabi, []string{"logbyt", `0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2`}},
			"0xfabc8c6100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000014ab8483f64d9c6d1ecf9b849ae677dd3315835cb2000000000000000000000000",
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := abis.Pack(tt.args.abiIns, tt.args.abiArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("Pack() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, hexutil.MustDecode(tt.want)) {
				t.Errorf("Pack() = %x, want %s", got, tt.want)
			}
		})
	}
}
